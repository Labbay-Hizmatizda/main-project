# rating = 0
# star = ''

# for s in range(rating):
    
#     star += 'üåï'

# n = 5 - rating
# for s in range(n):
#     star += 'üåë'
# print(star)

# m = 'XX-XXX-XX-XX'
# m = m.replace('-', '')
# print(m)


# class Solution:
# def findMin(nums):
#     n = len(nums)
#     l = 0
#     r = n - 1

#     while l < r:
#         m = (l + r) // 2
#         if nums[m] > nums[r]:
#             l = m + 1
#         else:
#             r = m

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    # return sorted(nums[:l] + nums[l:])

# print(findMin([4,5,6,1,2,3]))

# import sys

# m = {1 : 3}
# print(sys.getsizeof(m))


# m = [4,5,6,1,2,3]
# print(sorted(m))

# m.sort()
# print(m)






import time

class DictStorage:
    def __init__(self):
        self.dictionary = {}

    def add_dictionary(self, key, dictionary):
        self.dictionary[key] = dictionary

    def get_dictionary_by_key(self, key):
        return self.dictionary.get(key)

    def clear_dictionaries(self):
        self.dictionary = {}

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DictStorage
storage = DictStorage()

# –î–æ–±–∞–≤–ª—è–µ–º –º–∏–ª–ª–∏–æ–Ω —Å–ª–æ–≤–∞—Ä–µ–π
start_time_add = time.time()

for i in range(1000000):
    storage.add_dictionary(i, {i: i})

end_time_add = time.time()
add_time = end_time_add - start_time_add
print("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–ª–ª–∏–æ–Ω–∞ —Å–ª–æ–≤–∞—Ä–µ–π:", add_time, "—Å–µ–∫—É–Ω–¥")

# –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á—É 900000
start_time_get = time.time()

key = 900000
dictionary_by_key = storage.get_dictionary_by_key(key)

end_time_get = time.time()
get_time = end_time_get - start_time_get
print(f"–°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º {key}:", dictionary_by_key)

print("–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á—É 900000:", get_time, "—Å–µ–∫—É–Ω–¥")
